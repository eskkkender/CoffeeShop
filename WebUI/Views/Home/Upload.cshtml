@model DTO.ProductDTO
@{
    ViewBag.Title = "Upload";
}

<h2>Upload</h2>




@*@using (Html.BeginForm("Upload", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.file, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.file, new { htmlAttributes = new { @class = "form-control", @type = "file" } })
                    @Html.ValidationMessageFor(model => model.file, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Upload" class="btn btn-primary" />
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10 text-success">
                    @ViewBag.FileStatus
                    @ViewBag.FileName
                </div>
            </div>
        </div>
    }*@


<div id="tableBlock"></div>
<div id="editBlock">
    <p><b>Редактирование товара</b></p>
    <table>
        <tr><td><input type="hidden" id="editId" /></td><td></td></tr>
        <tr><td><label>Цена: </label></td><td><input type="text" id="editPrice" /></td></tr>
        <tr><td><label>Название: </label></td><td><input type="text" id="editName" /></td></tr>
        <tr><td><label>Описание: </label></td><td><input type="text" id="editDescription" /></td></tr>
    </table>
    <button id="editBook">Сохранить</button>
</div>

<div id="createBlock">
    <p><b>Добавление товара</b></p>
    <table>
        @*<tr><td><label>Цена: </label></td><td><input type="text" id="addPrice" /></td></tr>
        <tr><td><label>Название: </label></td><td><input type="text" id="addName" /></td></tr>
        <tr><td><label>Описание: </label></td><td><input type="text" id="addDescription" /></td></tr>*@
        @*@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control form-control-lg" } })*@
        <tr><td><label>Название: </label></td><td><input type="text" id="addName" /></td></tr>
        <tr><td><label>Изображение: </label></td><td><input type="file" id="addImage" /></td></tr>
    </table>
    <button id="addBook">Сохранить</button>
</div>



@section scripts
{
    <script type="text/javascript">
        $(document).ready(function () {

            GetAllBooks();

            $("#editBook").click(function (event) {
                event.preventDefault();
                EditBook();
            });

            $("#addBook").click(function (event) {
                event.preventDefault();
                AddProduct();
            });

        });

        function GetAllBooks() {
            $("#createBlock").css('display', 'block');
            $("#editBlock").css('display', 'none');
            $.ajax({
                url: '/api/Product',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    WriteResponse(data);
                },
                error: function (x, y, z) {
                    alert(x + '\n' + y + '\n' + z);
                }
            });
        }


        function AddProduct() {
            var formData = new FormData();
            formData.append('name', $('#addName').val());
            formData.append('file', $('#addImage')[0].files[0]);
            $.ajax({
                url: '/api/Product',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (data) {
                    GetAllBooks();
                },
                error: function (data) {
                    alert(data);
                }
            });
        }

        // Удаление книги
        function DeleteBook(id) {

            $.ajax({
                url: '/api/Product/' + id,
                type: 'DELETE',
                contentType: "application/json;charset=utf-8",
                success: function (data) {
                    GetAllBooks();
                },
                error: function (x, y, z) {
                    alert(x + '\n' + y + '\n' + z);
                }
            });
        }
        // редактирование книги
        function EditBook() {
            var id = $('#editId').val()
            // получаем новые значения для редактируемой книги
            var book = {
                Id: $('#editId').val(),
                Price: $('#editPrice').val(),
                Name: $('#editName').val(),
                Description: $('#editDescription').val()
            };
            $.ajax({
                url: '/api/Product/' + id,
                type: 'PUT',
                data: JSON.stringify(book),
                contentType: "application/json;charset=utf-8",
                success: function (data) {
                    GetAllBooks();
                },
                error: function (x, y, z) {
                    alert(x + '\n' + y + '\n' + z);
                }
            });
        }
        // вывод полученных данных на экран
        function WriteResponse(books) {
            var strResult = "<table><th>ID</th><th>Цена</th><th>Название</th>";
            $.each(books, function (index, book) {
                strResult += "<tr><td>" + book.Id + "</td><td> " + book.Price + "</td><td>" + book.Name + "</td><td>" + book.Description + "</td><td>" + book.FileUrl + "</td><td><a id='editItem' data-item='" + book.Id + "' onclick='EditItem(this);' >Редактировать</a></td>" +
                    "<td><a id='delItem' data-item='" + book.Id + "' onclick='DeleteItem(this);' >Удалить</a></td></tr>";
            });
            strResult += "</table>";
            $("#tableBlock").html(strResult);

        }
        // обработчик удаления
        function DeleteItem(el) {
            // получаем id удаляемого объекта
            var id = $(el).attr('data-item');
            DeleteBook(id);
        }
        // обработчик редактирования
        function EditItem(el) {
            // получаем id редактируемого объекта
            var id = $(el).attr('data-item');
            GetBook(id);
        }
        // вывод данных редактируемой книги в поля для редактирования
        function ShowBook(book) {
            if (book != null) {
                $("#createBlock").css('display', 'none');
                $("#editBlock").css('display', 'block');
                $("#editId").val(book.Id);
                $("#editPrice").val(book.Price);
                $("#editName").val(book.Name);
                $("#editDescription").val(book.Description);
            }
            else {
                alert("не существует");
            }
        }
        // запрос книги на редактирование
        function GetBook(id) {
            $.ajax({
                url: '/api/Product/' + id,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    ShowBook(data);
                },
                error: function (x, y, z) {
                    alert(x + '\n' + y + '\n' + z);
                }
            });
        }
    </script>
}



